// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "zwift_hub.proto" (package "org.cagnulen.qdomyoszwift", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * -------------- Zwift Hub messages
 * The command code prepending this message is 0x00
 * This message is sent always following the change of the gear ratio probably to verify it was received properly
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.HubRequest
 */
export interface HubRequest {
    /**
     * @generated from protobuf field: optional uint32 DataId = 1
     */
    dataId?: number; // Value observed 520 and 0, 0 requests general info, 1-7 are the fields# in DeviceInformationContent, 520 requests the gear ratio}
/**
 * The command code prepending this message is 0x03
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.HubRidingData
 */
export interface HubRidingData {
    /**
     * @generated from protobuf field: optional uint32 Power = 1
     */
    power?: number;
    /**
     * @generated from protobuf field: optional uint32 Cadence = 2
     */
    cadence?: number;
    /**
     * @generated from protobuf field: optional uint32 SpeedX100 = 3
     */
    speedX100?: number;
    /**
     * @generated from protobuf field: optional uint32 HR = 4
     */
    hR?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown1 = 5
     */
    unknown1?: number; // Values observed 0 when stopped, 2864, 4060, 4636, 6803    /**
     * @generated from protobuf field: optional uint32 Unknown2 = 6
     */
    unknown2?: number; // Values observed 25714, 30091 (constant during session)}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.SimulationParam
 */
export interface SimulationParam {
    /**
     * @generated from protobuf field: optional sint32 Windx100 = 1
     */
    windx100?: number; // Wind in m/s * 100. In zwift there is no wind (0). Negative is backwind    /**
     * @generated from protobuf field: optional sint32 InclineX100 = 2
     */
    inclineX100?: number; // Incline value * 100      /**
     * @generated from protobuf field: optional uint32 CWax10000 = 3
     */
    cWax10000?: number; // Wind coefficient CW * a * 10000. In zwift this is constant 0.51 (5100)     /**
     * @generated from protobuf field: optional uint32 Crrx100000 = 4
     */
    crrx100000?: number; // Rolling resistance Crr * 100000. In zwift this is constant 0.004 (400)}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.PhysicalParam
 */
export interface PhysicalParam {
    /**
     * @generated from protobuf field: optional uint32 GearRatioX10000 = 2
     */
    gearRatioX10000?: number;
    /**
     * @generated from protobuf field: optional uint32 BikeWeightx100 = 4
     */
    bikeWeightx100?: number;
    /**
     * @generated from protobuf field: optional uint32 RiderWeightx100 = 5
     */
    riderWeightx100?: number;
}
/**
 * The command code prepending this message is 0x04
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.HubCommand
 */
export interface HubCommand {
    /**
     * @generated from protobuf field: optional uint32 PowerTarget = 3
     */
    powerTarget?: number;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.SimulationParam Simulation = 4
     */
    simulation?: SimulationParam;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PhysicalParam Physical = 5
     */
    physical?: PhysicalParam;
}
/**
 * The command code prepending this message is 0x07
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.PlayKeyPadStatus
 */
export interface PlayKeyPadStatus {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus RightPad = 1
     */
    rightPad?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Y_Up = 2
     */
    buttonYUp?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Z_Left = 3
     */
    buttonZLeft?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_A_Right = 4
     */
    buttonARight?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_B_Down = 5
     */
    buttonBDown?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_On = 6
     */
    buttonOn?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Shift = 7
     */
    buttonShift?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional sint32 Analog_LR = 8
     */
    analogLR?: number;
    /**
     * @generated from protobuf field: optional sint32 Analog_UD = 9
     */
    analogUD?: number;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.PlayCommandParameters
 */
export interface PlayCommandParameters {
    /**
     * @generated from protobuf field: optional uint32 param1 = 1
     */
    param1?: number;
    /**
     * @generated from protobuf field: optional uint32 param2 = 2
     */
    param2?: number;
    /**
     * @generated from protobuf field: optional uint32 HapticPattern = 3
     */
    hapticPattern?: number;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.PlayCommandContents
 */
export interface PlayCommandContents {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayCommandParameters CommandParameters = 1
     */
    commandParameters?: PlayCommandParameters;
}
/**
 * The command code prepending this message is 0x12
 * This is sent to the control point to configure and make the controller vibrate
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.PlayCommand
 */
export interface PlayCommand {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayCommandContents CommandContents = 2
     */
    commandContents?: PlayCommandContents;
}
/**
 * The command code prepending this message is 0x19
 * This is sent periodically when there are no button presses
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.Idle
 */
export interface Idle {
    /**
     * @generated from protobuf field: optional uint32 Unknown2 = 2
     */
    unknown2?: number;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.RideAnalogKeyPress
 */
export interface RideAnalogKeyPress {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.RideAnalogLocation Location = 1
     */
    location?: RideAnalogLocation;
    /**
     * @generated from protobuf field: optional sint32 AnalogValue = 2
     */
    analogValue?: number;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.RideAnalogKeyGroup
 */
export interface RideAnalogKeyGroup {
    /**
     * @generated from protobuf field: repeated org.cagnulen.qdomyoszwift.RideAnalogKeyPress GroupStatus = 1
     */
    groupStatus: RideAnalogKeyPress[];
}
/**
 * The command code prepending this message is 0x23
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.RideKeyPadStatus
 */
export interface RideKeyPadStatus {
    /**
     * @generated from protobuf field: optional uint32 ButtonMap = 1
     */
    buttonMap?: number;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.RideAnalogKeyGroup AnalogButtons = 2
     */
    analogButtons?: RideAnalogKeyGroup;
}
/**
 * ------------------ Zwift Click messages
 * The command code prepending this message is 0x37
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.ClickKeyPadStatus
 */
export interface ClickKeyPadStatus {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Plus = 1
     */
    buttonPlus?: PlayButtonStatus;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Minus = 2
     */
    buttonMinus?: PlayButtonStatus;
}
/**
 * ------------------ Device Information requested after connection
 * The command code prepending this message is 0x3c
 *
 * @generated from protobuf message org.cagnulen.qdomyoszwift.DeviceInformationContent
 */
export interface DeviceInformationContent {
    /**
     * @generated from protobuf field: optional uint32 Unknown1 = 1
     */
    unknown1?: number;
    /**
     * @generated from protobuf field: repeated uint32 SoftwareVersion = 2
     */
    softwareVersion: number[];
    /**
     * @generated from protobuf field: optional string DeviceName = 3
     */
    deviceName?: string;
    /**
     * @generated from protobuf field: optional uint32 Unknown4 = 4
     */
    unknown4?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown5 = 5
     */
    unknown5?: number;
    /**
     * @generated from protobuf field: optional string SerialNumber = 6
     */
    serialNumber?: string;
    /**
     * @generated from protobuf field: optional string HardwareVersion = 7
     */
    hardwareVersion?: string;
    /**
     * @generated from protobuf field: repeated uint32 ReplyData = 8
     */
    replyData: number[];
    /**
     * @generated from protobuf field: optional uint32 Unknown9 = 9
     */
    unknown9?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown10 = 10
     */
    unknown10?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown13 = 13
     */
    unknown13?: number;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.SubContent
 */
export interface SubContent {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.DeviceInformationContent Content = 1
     */
    content?: DeviceInformationContent;
    /**
     * @generated from protobuf field: optional uint32 Unknown2 = 2
     */
    unknown2?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown4 = 4
     */
    unknown4?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown5 = 5
     */
    unknown5?: number;
    /**
     * @generated from protobuf field: optional uint32 Unknown6 = 6
     */
    unknown6?: number;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.DeviceInformation
 */
export interface DeviceInformation {
    /**
     * @generated from protobuf field: optional uint32 InformationId = 1
     */
    informationId?: number;
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.SubContent DeviceInformationContent = 2
     */
    deviceInformationContent?: SubContent;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.DeviceSettings
 */
export interface DeviceSettings {
    /**
     * @generated from protobuf field: optional org.cagnulen.qdomyoszwift.DeviceSettingsSubContent SubContent = 1
     */
    subContent?: DeviceSettingsSubContent;
}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.DeviceSettingsSubContent
 */
export interface DeviceSettingsSubContent {
    /**
     * @generated from protobuf field: optional sint32 Windx100 = 5
     */
    windx100?: number; // Wind in m/s * 100. In zwift there is no wind (0). Negative is backwind    /**
     * @generated from protobuf field: optional sint32 InclineX100 = 6
     */
    inclineX100?: number; // Incline value * 100      /**
     * @generated from protobuf field: optional uint32 GearRatiox10000 = 8
     */
    gearRatiox10000?: number;
    /**
     * @generated from protobuf field: optional uint32 BikeWeightx100 = 11
     */
    bikeWeightx100?: number;
    /**
     * @generated from protobuf field: optional uint32 RiderWeightx100 = 12
     */
    riderWeightx100?: number;
    /**
     * @generated from protobuf field: optional uint32 Crrx100000 = 13
     */
    crrx100000?: number; // Rolling resistance Crr * 100000. In zwift this is constant 0.004 (400)}
/**
 * @generated from protobuf message org.cagnulen.qdomyoszwift.DeviceDataEnvelope
 */
export interface DeviceDataEnvelope {
    /**
     * @generated from protobuf field: optional uint32 message_type = 1
     */
    messageType?: number;
    /**
     * @generated from protobuf field: optional bytes payload = 2
     */
    payload?: Uint8Array; // raw inner bytes}
// ---------------- Zwift Play messages

/**
 * @generated from protobuf enum org.cagnulen.qdomyoszwift.PlayButtonStatus
 */
export enum PlayButtonStatus {
    /**
     * @generated from protobuf enum value: ON = 0;
     */
    ON = 0,
    /**
     * @generated from protobuf enum value: OFF = 1;
     */
    OFF = 1
}
/**
 * ----------------- Zwift Ride messages
 *
 * @generated from protobuf enum org.cagnulen.qdomyoszwift.RideButtonMask
 */
export enum RideButtonMask {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: LEFT_BTN = 1;
     */
    LEFT_BTN = 1,
    /**
     * @generated from protobuf enum value: UP_BTN = 2;
     */
    UP_BTN = 2,
    /**
     * @generated from protobuf enum value: RIGHT_BTN = 4;
     */
    RIGHT_BTN = 4,
    /**
     * @generated from protobuf enum value: DOWN_BTN = 8;
     */
    DOWN_BTN = 8,
    /**
     * @generated from protobuf enum value: A_BTN = 16;
     */
    A_BTN = 16,
    /**
     * @generated from protobuf enum value: B_BTN = 32;
     */
    B_BTN = 32,
    /**
     * @generated from protobuf enum value: Y_BTN = 64;
     */
    Y_BTN = 64,
    /**
     * @generated from protobuf enum value: Z_BTN = 256;
     */
    Z_BTN = 256,
    /**
     * @generated from protobuf enum value: SHFT_UP_L_BTN = 512;
     */
    SHFT_UP_L_BTN = 512,
    /**
     * @generated from protobuf enum value: SHFT_DN_L_BTN = 1024;
     */
    SHFT_DN_L_BTN = 1024,
    /**
     * @generated from protobuf enum value: POWERUP_L_BTN = 2048;
     */
    POWERUP_L_BTN = 2048,
    /**
     * @generated from protobuf enum value: ONOFF_L_BTN = 4096;
     */
    ONOFF_L_BTN = 4096,
    /**
     * @generated from protobuf enum value: SHFT_UP_R_BTN = 8192;
     */
    SHFT_UP_R_BTN = 8192,
    /**
     * @generated from protobuf enum value: SHFT_DN_R_BTN = 16384;
     */
    SHFT_DN_R_BTN = 16384,
    /**
     * @generated from protobuf enum value: POWERUP_R_BTN = 65536;
     */
    POWERUP_R_BTN = 65536,
    /**
     * @generated from protobuf enum value: ONOFF_R_BTN = 131072;
     */
    ONOFF_R_BTN = 131072
}
/**
 * @generated from protobuf enum org.cagnulen.qdomyoszwift.RideAnalogLocation
 */
export enum RideAnalogLocation {
    /**
     * @generated from protobuf enum value: LEFT = 0;
     */
    LEFT = 0,
    /**
     * @generated from protobuf enum value: RIGHT = 1;
     */
    RIGHT = 1,
    /**
     * @generated from protobuf enum value: UP = 2;
     */
    UP = 2,
    /**
     * @generated from protobuf enum value: DOWN = 3;
     */
    DOWN = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class HubRequest$Type extends MessageType<HubRequest> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.HubRequest", [
            { no: 1, name: "DataId", kind: "scalar", jsonName: "DataId", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HubRequest>): HubRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HubRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HubRequest): HubRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 DataId */ 1:
                    message.dataId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HubRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 DataId = 1; */
        if (message.dataId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dataId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.HubRequest
 */
export const HubRequest = new HubRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HubRidingData$Type extends MessageType<HubRidingData> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.HubRidingData", [
            { no: 1, name: "Power", kind: "scalar", jsonName: "Power", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "Cadence", kind: "scalar", jsonName: "Cadence", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "SpeedX100", kind: "scalar", jsonName: "SpeedX100", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "HR", kind: "scalar", jsonName: "HR", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "Unknown1", kind: "scalar", jsonName: "Unknown1", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "Unknown2", kind: "scalar", jsonName: "Unknown2", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HubRidingData>): HubRidingData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HubRidingData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HubRidingData): HubRidingData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 Power */ 1:
                    message.power = reader.uint32();
                    break;
                case /* optional uint32 Cadence */ 2:
                    message.cadence = reader.uint32();
                    break;
                case /* optional uint32 SpeedX100 */ 3:
                    message.speedX100 = reader.uint32();
                    break;
                case /* optional uint32 HR */ 4:
                    message.hR = reader.uint32();
                    break;
                case /* optional uint32 Unknown1 */ 5:
                    message.unknown1 = reader.uint32();
                    break;
                case /* optional uint32 Unknown2 */ 6:
                    message.unknown2 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HubRidingData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 Power = 1; */
        if (message.power !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.power);
        /* optional uint32 Cadence = 2; */
        if (message.cadence !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.cadence);
        /* optional uint32 SpeedX100 = 3; */
        if (message.speedX100 !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.speedX100);
        /* optional uint32 HR = 4; */
        if (message.hR !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.hR);
        /* optional uint32 Unknown1 = 5; */
        if (message.unknown1 !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.unknown1);
        /* optional uint32 Unknown2 = 6; */
        if (message.unknown2 !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.unknown2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.HubRidingData
 */
export const HubRidingData = new HubRidingData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimulationParam$Type extends MessageType<SimulationParam> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.SimulationParam", [
            { no: 1, name: "Windx100", kind: "scalar", jsonName: "Windx100", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "InclineX100", kind: "scalar", jsonName: "InclineX100", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 3, name: "CWax10000", kind: "scalar", jsonName: "CWax10000", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "Crrx100000", kind: "scalar", jsonName: "Crrx100000", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SimulationParam>): SimulationParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SimulationParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulationParam): SimulationParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional sint32 Windx100 */ 1:
                    message.windx100 = reader.sint32();
                    break;
                case /* optional sint32 InclineX100 */ 2:
                    message.inclineX100 = reader.sint32();
                    break;
                case /* optional uint32 CWax10000 */ 3:
                    message.cWax10000 = reader.uint32();
                    break;
                case /* optional uint32 Crrx100000 */ 4:
                    message.crrx100000 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimulationParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional sint32 Windx100 = 1; */
        if (message.windx100 !== undefined)
            writer.tag(1, WireType.Varint).sint32(message.windx100);
        /* optional sint32 InclineX100 = 2; */
        if (message.inclineX100 !== undefined)
            writer.tag(2, WireType.Varint).sint32(message.inclineX100);
        /* optional uint32 CWax10000 = 3; */
        if (message.cWax10000 !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cWax10000);
        /* optional uint32 Crrx100000 = 4; */
        if (message.crrx100000 !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.crrx100000);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.SimulationParam
 */
export const SimulationParam = new SimulationParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhysicalParam$Type extends MessageType<PhysicalParam> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.PhysicalParam", [
            { no: 2, name: "GearRatioX10000", kind: "scalar", jsonName: "GearRatioX10000", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "BikeWeightx100", kind: "scalar", jsonName: "BikeWeightx100", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "RiderWeightx100", kind: "scalar", jsonName: "RiderWeightx100", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PhysicalParam>): PhysicalParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PhysicalParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhysicalParam): PhysicalParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 GearRatioX10000 */ 2:
                    message.gearRatioX10000 = reader.uint32();
                    break;
                case /* optional uint32 BikeWeightx100 */ 4:
                    message.bikeWeightx100 = reader.uint32();
                    break;
                case /* optional uint32 RiderWeightx100 */ 5:
                    message.riderWeightx100 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhysicalParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 GearRatioX10000 = 2; */
        if (message.gearRatioX10000 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gearRatioX10000);
        /* optional uint32 BikeWeightx100 = 4; */
        if (message.bikeWeightx100 !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.bikeWeightx100);
        /* optional uint32 RiderWeightx100 = 5; */
        if (message.riderWeightx100 !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.riderWeightx100);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.PhysicalParam
 */
export const PhysicalParam = new PhysicalParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HubCommand$Type extends MessageType<HubCommand> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.HubCommand", [
            { no: 3, name: "PowerTarget", kind: "scalar", jsonName: "PowerTarget", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "Simulation", kind: "message", jsonName: "Simulation", T: () => SimulationParam },
            { no: 5, name: "Physical", kind: "message", jsonName: "Physical", T: () => PhysicalParam }
        ]);
    }
    create(value?: PartialMessage<HubCommand>): HubCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HubCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HubCommand): HubCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 PowerTarget */ 3:
                    message.powerTarget = reader.uint32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.SimulationParam Simulation */ 4:
                    message.simulation = SimulationParam.internalBinaryRead(reader, reader.uint32(), options, message.simulation);
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PhysicalParam Physical */ 5:
                    message.physical = PhysicalParam.internalBinaryRead(reader, reader.uint32(), options, message.physical);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HubCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 PowerTarget = 3; */
        if (message.powerTarget !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.powerTarget);
        /* optional org.cagnulen.qdomyoszwift.SimulationParam Simulation = 4; */
        if (message.simulation)
            SimulationParam.internalBinaryWrite(message.simulation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional org.cagnulen.qdomyoszwift.PhysicalParam Physical = 5; */
        if (message.physical)
            PhysicalParam.internalBinaryWrite(message.physical, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.HubCommand
 */
export const HubCommand = new HubCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayKeyPadStatus$Type extends MessageType<PlayKeyPadStatus> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.PlayKeyPadStatus", [
            { no: 1, name: "RightPad", kind: "enum", jsonName: "RightPad", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 2, name: "Button_Y_Up", kind: "enum", jsonName: "ButtonYUp", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 3, name: "Button_Z_Left", kind: "enum", jsonName: "ButtonZLeft", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 4, name: "Button_A_Right", kind: "enum", jsonName: "ButtonARight", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 5, name: "Button_B_Down", kind: "enum", jsonName: "ButtonBDown", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 6, name: "Button_On", kind: "enum", jsonName: "ButtonOn", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 7, name: "Button_Shift", kind: "enum", jsonName: "ButtonShift", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 8, name: "Analog_LR", kind: "scalar", jsonName: "AnalogLR", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 9, name: "Analog_UD", kind: "scalar", jsonName: "AnalogUD", opt: true, T: 17 /*ScalarType.SINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayKeyPadStatus>): PlayKeyPadStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayKeyPadStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayKeyPadStatus): PlayKeyPadStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus RightPad */ 1:
                    message.rightPad = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Y_Up */ 2:
                    message.buttonYUp = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Z_Left */ 3:
                    message.buttonZLeft = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_A_Right */ 4:
                    message.buttonARight = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_B_Down */ 5:
                    message.buttonBDown = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_On */ 6:
                    message.buttonOn = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Shift */ 7:
                    message.buttonShift = reader.int32();
                    break;
                case /* optional sint32 Analog_LR */ 8:
                    message.analogLR = reader.sint32();
                    break;
                case /* optional sint32 Analog_UD */ 9:
                    message.analogUD = reader.sint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayKeyPadStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus RightPad = 1; */
        if (message.rightPad !== undefined)
            writer.tag(1, WireType.Varint).int32(message.rightPad);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Y_Up = 2; */
        if (message.buttonYUp !== undefined)
            writer.tag(2, WireType.Varint).int32(message.buttonYUp);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Z_Left = 3; */
        if (message.buttonZLeft !== undefined)
            writer.tag(3, WireType.Varint).int32(message.buttonZLeft);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_A_Right = 4; */
        if (message.buttonARight !== undefined)
            writer.tag(4, WireType.Varint).int32(message.buttonARight);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_B_Down = 5; */
        if (message.buttonBDown !== undefined)
            writer.tag(5, WireType.Varint).int32(message.buttonBDown);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_On = 6; */
        if (message.buttonOn !== undefined)
            writer.tag(6, WireType.Varint).int32(message.buttonOn);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Shift = 7; */
        if (message.buttonShift !== undefined)
            writer.tag(7, WireType.Varint).int32(message.buttonShift);
        /* optional sint32 Analog_LR = 8; */
        if (message.analogLR !== undefined)
            writer.tag(8, WireType.Varint).sint32(message.analogLR);
        /* optional sint32 Analog_UD = 9; */
        if (message.analogUD !== undefined)
            writer.tag(9, WireType.Varint).sint32(message.analogUD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.PlayKeyPadStatus
 */
export const PlayKeyPadStatus = new PlayKeyPadStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayCommandParameters$Type extends MessageType<PlayCommandParameters> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.PlayCommandParameters", [
            { no: 1, name: "param1", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "param2", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "HapticPattern", kind: "scalar", jsonName: "HapticPattern", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayCommandParameters>): PlayCommandParameters {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayCommandParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayCommandParameters): PlayCommandParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param1 */ 1:
                    message.param1 = reader.uint32();
                    break;
                case /* optional uint32 param2 */ 2:
                    message.param2 = reader.uint32();
                    break;
                case /* optional uint32 HapticPattern */ 3:
                    message.hapticPattern = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayCommandParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param1 = 1; */
        if (message.param1 !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.param1);
        /* optional uint32 param2 = 2; */
        if (message.param2 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.param2);
        /* optional uint32 HapticPattern = 3; */
        if (message.hapticPattern !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.hapticPattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.PlayCommandParameters
 */
export const PlayCommandParameters = new PlayCommandParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayCommandContents$Type extends MessageType<PlayCommandContents> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.PlayCommandContents", [
            { no: 1, name: "CommandParameters", kind: "message", jsonName: "CommandParameters", T: () => PlayCommandParameters }
        ]);
    }
    create(value?: PartialMessage<PlayCommandContents>): PlayCommandContents {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayCommandContents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayCommandContents): PlayCommandContents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.PlayCommandParameters CommandParameters */ 1:
                    message.commandParameters = PlayCommandParameters.internalBinaryRead(reader, reader.uint32(), options, message.commandParameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayCommandContents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.PlayCommandParameters CommandParameters = 1; */
        if (message.commandParameters)
            PlayCommandParameters.internalBinaryWrite(message.commandParameters, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.PlayCommandContents
 */
export const PlayCommandContents = new PlayCommandContents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayCommand$Type extends MessageType<PlayCommand> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.PlayCommand", [
            { no: 2, name: "CommandContents", kind: "message", jsonName: "CommandContents", T: () => PlayCommandContents }
        ]);
    }
    create(value?: PartialMessage<PlayCommand>): PlayCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayCommand): PlayCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.PlayCommandContents CommandContents */ 2:
                    message.commandContents = PlayCommandContents.internalBinaryRead(reader, reader.uint32(), options, message.commandContents);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.PlayCommandContents CommandContents = 2; */
        if (message.commandContents)
            PlayCommandContents.internalBinaryWrite(message.commandContents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.PlayCommand
 */
export const PlayCommand = new PlayCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Idle$Type extends MessageType<Idle> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.Idle", [
            { no: 2, name: "Unknown2", kind: "scalar", jsonName: "Unknown2", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Idle>): Idle {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Idle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Idle): Idle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 Unknown2 */ 2:
                    message.unknown2 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Idle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 Unknown2 = 2; */
        if (message.unknown2 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.unknown2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.Idle
 */
export const Idle = new Idle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RideAnalogKeyPress$Type extends MessageType<RideAnalogKeyPress> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.RideAnalogKeyPress", [
            { no: 1, name: "Location", kind: "enum", jsonName: "Location", opt: true, T: () => ["org.cagnulen.qdomyoszwift.RideAnalogLocation", RideAnalogLocation] },
            { no: 2, name: "AnalogValue", kind: "scalar", jsonName: "AnalogValue", opt: true, T: 17 /*ScalarType.SINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RideAnalogKeyPress>): RideAnalogKeyPress {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RideAnalogKeyPress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RideAnalogKeyPress): RideAnalogKeyPress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.RideAnalogLocation Location */ 1:
                    message.location = reader.int32();
                    break;
                case /* optional sint32 AnalogValue */ 2:
                    message.analogValue = reader.sint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RideAnalogKeyPress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.RideAnalogLocation Location = 1; */
        if (message.location !== undefined)
            writer.tag(1, WireType.Varint).int32(message.location);
        /* optional sint32 AnalogValue = 2; */
        if (message.analogValue !== undefined)
            writer.tag(2, WireType.Varint).sint32(message.analogValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.RideAnalogKeyPress
 */
export const RideAnalogKeyPress = new RideAnalogKeyPress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RideAnalogKeyGroup$Type extends MessageType<RideAnalogKeyGroup> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.RideAnalogKeyGroup", [
            { no: 1, name: "GroupStatus", kind: "message", jsonName: "GroupStatus", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RideAnalogKeyPress }
        ]);
    }
    create(value?: PartialMessage<RideAnalogKeyGroup>): RideAnalogKeyGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupStatus = [];
        if (value !== undefined)
            reflectionMergePartial<RideAnalogKeyGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RideAnalogKeyGroup): RideAnalogKeyGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated org.cagnulen.qdomyoszwift.RideAnalogKeyPress GroupStatus */ 1:
                    message.groupStatus.push(RideAnalogKeyPress.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RideAnalogKeyGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated org.cagnulen.qdomyoszwift.RideAnalogKeyPress GroupStatus = 1; */
        for (let i = 0; i < message.groupStatus.length; i++)
            RideAnalogKeyPress.internalBinaryWrite(message.groupStatus[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.RideAnalogKeyGroup
 */
export const RideAnalogKeyGroup = new RideAnalogKeyGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RideKeyPadStatus$Type extends MessageType<RideKeyPadStatus> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.RideKeyPadStatus", [
            { no: 1, name: "ButtonMap", kind: "scalar", jsonName: "ButtonMap", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "AnalogButtons", kind: "message", jsonName: "AnalogButtons", T: () => RideAnalogKeyGroup }
        ]);
    }
    create(value?: PartialMessage<RideKeyPadStatus>): RideKeyPadStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RideKeyPadStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RideKeyPadStatus): RideKeyPadStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 ButtonMap */ 1:
                    message.buttonMap = reader.uint32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.RideAnalogKeyGroup AnalogButtons */ 2:
                    message.analogButtons = RideAnalogKeyGroup.internalBinaryRead(reader, reader.uint32(), options, message.analogButtons);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RideKeyPadStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 ButtonMap = 1; */
        if (message.buttonMap !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.buttonMap);
        /* optional org.cagnulen.qdomyoszwift.RideAnalogKeyGroup AnalogButtons = 2; */
        if (message.analogButtons)
            RideAnalogKeyGroup.internalBinaryWrite(message.analogButtons, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.RideKeyPadStatus
 */
export const RideKeyPadStatus = new RideKeyPadStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickKeyPadStatus$Type extends MessageType<ClickKeyPadStatus> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.ClickKeyPadStatus", [
            { no: 1, name: "Button_Plus", kind: "enum", jsonName: "ButtonPlus", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] },
            { no: 2, name: "Button_Minus", kind: "enum", jsonName: "ButtonMinus", opt: true, T: () => ["org.cagnulen.qdomyoszwift.PlayButtonStatus", PlayButtonStatus] }
        ]);
    }
    create(value?: PartialMessage<ClickKeyPadStatus>): ClickKeyPadStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClickKeyPadStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClickKeyPadStatus): ClickKeyPadStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Plus */ 1:
                    message.buttonPlus = reader.int32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Minus */ 2:
                    message.buttonMinus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClickKeyPadStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Plus = 1; */
        if (message.buttonPlus !== undefined)
            writer.tag(1, WireType.Varint).int32(message.buttonPlus);
        /* optional org.cagnulen.qdomyoszwift.PlayButtonStatus Button_Minus = 2; */
        if (message.buttonMinus !== undefined)
            writer.tag(2, WireType.Varint).int32(message.buttonMinus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.ClickKeyPadStatus
 */
export const ClickKeyPadStatus = new ClickKeyPadStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceInformationContent$Type extends MessageType<DeviceInformationContent> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.DeviceInformationContent", [
            { no: 1, name: "Unknown1", kind: "scalar", jsonName: "Unknown1", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "SoftwareVersion", kind: "scalar", jsonName: "SoftwareVersion", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "DeviceName", kind: "scalar", jsonName: "DeviceName", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Unknown4", kind: "scalar", jsonName: "Unknown4", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "Unknown5", kind: "scalar", jsonName: "Unknown5", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "SerialNumber", kind: "scalar", jsonName: "SerialNumber", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "HardwareVersion", kind: "scalar", jsonName: "HardwareVersion", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ReplyData", kind: "scalar", jsonName: "ReplyData", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "Unknown9", kind: "scalar", jsonName: "Unknown9", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "Unknown10", kind: "scalar", jsonName: "Unknown10", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "Unknown13", kind: "scalar", jsonName: "Unknown13", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceInformationContent>): DeviceInformationContent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.softwareVersion = [];
        message.replyData = [];
        if (value !== undefined)
            reflectionMergePartial<DeviceInformationContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceInformationContent): DeviceInformationContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 Unknown1 */ 1:
                    message.unknown1 = reader.uint32();
                    break;
                case /* repeated uint32 SoftwareVersion */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.softwareVersion.push(reader.uint32());
                    else
                        message.softwareVersion.push(reader.uint32());
                    break;
                case /* optional string DeviceName */ 3:
                    message.deviceName = reader.string();
                    break;
                case /* optional uint32 Unknown4 */ 4:
                    message.unknown4 = reader.uint32();
                    break;
                case /* optional uint32 Unknown5 */ 5:
                    message.unknown5 = reader.uint32();
                    break;
                case /* optional string SerialNumber */ 6:
                    message.serialNumber = reader.string();
                    break;
                case /* optional string HardwareVersion */ 7:
                    message.hardwareVersion = reader.string();
                    break;
                case /* repeated uint32 ReplyData */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.replyData.push(reader.uint32());
                    else
                        message.replyData.push(reader.uint32());
                    break;
                case /* optional uint32 Unknown9 */ 9:
                    message.unknown9 = reader.uint32();
                    break;
                case /* optional uint32 Unknown10 */ 10:
                    message.unknown10 = reader.uint32();
                    break;
                case /* optional uint32 Unknown13 */ 13:
                    message.unknown13 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceInformationContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 Unknown1 = 1; */
        if (message.unknown1 !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.unknown1);
        /* repeated uint32 SoftwareVersion = 2; */
        for (let i = 0; i < message.softwareVersion.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.softwareVersion[i]);
        /* optional string DeviceName = 3; */
        if (message.deviceName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.deviceName);
        /* optional uint32 Unknown4 = 4; */
        if (message.unknown4 !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.unknown4);
        /* optional uint32 Unknown5 = 5; */
        if (message.unknown5 !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.unknown5);
        /* optional string SerialNumber = 6; */
        if (message.serialNumber !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.serialNumber);
        /* optional string HardwareVersion = 7; */
        if (message.hardwareVersion !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.hardwareVersion);
        /* repeated uint32 ReplyData = 8; */
        for (let i = 0; i < message.replyData.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.replyData[i]);
        /* optional uint32 Unknown9 = 9; */
        if (message.unknown9 !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.unknown9);
        /* optional uint32 Unknown10 = 10; */
        if (message.unknown10 !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.unknown10);
        /* optional uint32 Unknown13 = 13; */
        if (message.unknown13 !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.unknown13);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.DeviceInformationContent
 */
export const DeviceInformationContent = new DeviceInformationContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubContent$Type extends MessageType<SubContent> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.SubContent", [
            { no: 1, name: "Content", kind: "message", jsonName: "Content", T: () => DeviceInformationContent },
            { no: 2, name: "Unknown2", kind: "scalar", jsonName: "Unknown2", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "Unknown4", kind: "scalar", jsonName: "Unknown4", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "Unknown5", kind: "scalar", jsonName: "Unknown5", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "Unknown6", kind: "scalar", jsonName: "Unknown6", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SubContent>): SubContent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubContent): SubContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.DeviceInformationContent Content */ 1:
                    message.content = DeviceInformationContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* optional uint32 Unknown2 */ 2:
                    message.unknown2 = reader.uint32();
                    break;
                case /* optional uint32 Unknown4 */ 4:
                    message.unknown4 = reader.uint32();
                    break;
                case /* optional uint32 Unknown5 */ 5:
                    message.unknown5 = reader.uint32();
                    break;
                case /* optional uint32 Unknown6 */ 6:
                    message.unknown6 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.DeviceInformationContent Content = 1; */
        if (message.content)
            DeviceInformationContent.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 Unknown2 = 2; */
        if (message.unknown2 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.unknown2);
        /* optional uint32 Unknown4 = 4; */
        if (message.unknown4 !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.unknown4);
        /* optional uint32 Unknown5 = 5; */
        if (message.unknown5 !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.unknown5);
        /* optional uint32 Unknown6 = 6; */
        if (message.unknown6 !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.unknown6);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.SubContent
 */
export const SubContent = new SubContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceInformation$Type extends MessageType<DeviceInformation> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.DeviceInformation", [
            { no: 1, name: "InformationId", kind: "scalar", jsonName: "InformationId", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "DeviceInformationContent", kind: "message", jsonName: "DeviceInformationContent", T: () => SubContent }
        ]);
    }
    create(value?: PartialMessage<DeviceInformation>): DeviceInformation {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeviceInformation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceInformation): DeviceInformation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 InformationId */ 1:
                    message.informationId = reader.uint32();
                    break;
                case /* optional org.cagnulen.qdomyoszwift.SubContent DeviceInformationContent */ 2:
                    message.deviceInformationContent = SubContent.internalBinaryRead(reader, reader.uint32(), options, message.deviceInformationContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceInformation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 InformationId = 1; */
        if (message.informationId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.informationId);
        /* optional org.cagnulen.qdomyoszwift.SubContent DeviceInformationContent = 2; */
        if (message.deviceInformationContent)
            SubContent.internalBinaryWrite(message.deviceInformationContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.DeviceInformation
 */
export const DeviceInformation = new DeviceInformation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceSettings$Type extends MessageType<DeviceSettings> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.DeviceSettings", [
            { no: 1, name: "SubContent", kind: "message", jsonName: "SubContent", T: () => DeviceSettingsSubContent }
        ]);
    }
    create(value?: PartialMessage<DeviceSettings>): DeviceSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeviceSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceSettings): DeviceSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional org.cagnulen.qdomyoszwift.DeviceSettingsSubContent SubContent */ 1:
                    message.subContent = DeviceSettingsSubContent.internalBinaryRead(reader, reader.uint32(), options, message.subContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional org.cagnulen.qdomyoszwift.DeviceSettingsSubContent SubContent = 1; */
        if (message.subContent)
            DeviceSettingsSubContent.internalBinaryWrite(message.subContent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.DeviceSettings
 */
export const DeviceSettings = new DeviceSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceSettingsSubContent$Type extends MessageType<DeviceSettingsSubContent> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.DeviceSettingsSubContent", [
            { no: 5, name: "Windx100", kind: "scalar", jsonName: "Windx100", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "InclineX100", kind: "scalar", jsonName: "InclineX100", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 8, name: "GearRatiox10000", kind: "scalar", jsonName: "GearRatiox10000", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "BikeWeightx100", kind: "scalar", jsonName: "BikeWeightx100", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "RiderWeightx100", kind: "scalar", jsonName: "RiderWeightx100", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "Crrx100000", kind: "scalar", jsonName: "Crrx100000", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceSettingsSubContent>): DeviceSettingsSubContent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeviceSettingsSubContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceSettingsSubContent): DeviceSettingsSubContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional sint32 Windx100 */ 5:
                    message.windx100 = reader.sint32();
                    break;
                case /* optional sint32 InclineX100 */ 6:
                    message.inclineX100 = reader.sint32();
                    break;
                case /* optional uint32 GearRatiox10000 */ 8:
                    message.gearRatiox10000 = reader.uint32();
                    break;
                case /* optional uint32 BikeWeightx100 */ 11:
                    message.bikeWeightx100 = reader.uint32();
                    break;
                case /* optional uint32 RiderWeightx100 */ 12:
                    message.riderWeightx100 = reader.uint32();
                    break;
                case /* optional uint32 Crrx100000 */ 13:
                    message.crrx100000 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceSettingsSubContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional sint32 Windx100 = 5; */
        if (message.windx100 !== undefined)
            writer.tag(5, WireType.Varint).sint32(message.windx100);
        /* optional sint32 InclineX100 = 6; */
        if (message.inclineX100 !== undefined)
            writer.tag(6, WireType.Varint).sint32(message.inclineX100);
        /* optional uint32 GearRatiox10000 = 8; */
        if (message.gearRatiox10000 !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gearRatiox10000);
        /* optional uint32 BikeWeightx100 = 11; */
        if (message.bikeWeightx100 !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.bikeWeightx100);
        /* optional uint32 RiderWeightx100 = 12; */
        if (message.riderWeightx100 !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.riderWeightx100);
        /* optional uint32 Crrx100000 = 13; */
        if (message.crrx100000 !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.crrx100000);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.DeviceSettingsSubContent
 */
export const DeviceSettingsSubContent = new DeviceSettingsSubContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceDataEnvelope$Type extends MessageType<DeviceDataEnvelope> {
    constructor() {
        super("org.cagnulen.qdomyoszwift.DeviceDataEnvelope", [
            { no: 1, name: "message_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "payload", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceDataEnvelope>): DeviceDataEnvelope {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeviceDataEnvelope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceDataEnvelope): DeviceDataEnvelope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 message_type */ 1:
                    message.messageType = reader.uint32();
                    break;
                case /* optional bytes payload */ 2:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceDataEnvelope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 message_type = 1; */
        if (message.messageType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.messageType);
        /* optional bytes payload = 2; */
        if (message.payload !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message org.cagnulen.qdomyoszwift.DeviceDataEnvelope
 */
export const DeviceDataEnvelope = new DeviceDataEnvelope$Type();
