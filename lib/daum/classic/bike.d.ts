import { EventLogger } from 'gd-eventlog';
import { Queue } from '../../utils';
declare type SuccessCallbackFn = (data: any) => void;
declare type ErrorCallbackFn = (status: number, error: any) => void;
interface CommandInstructions {
    logStr: string;
    payload: Array<number>;
    expected: number;
    callback: SuccessCallbackFn;
    callbackErr: ErrorCallbackFn;
    options?: any;
}
export default class Daum8008 {
    logger: EventLogger;
    portName: string;
    settings: any;
    bikeData: any;
    processor: any;
    sp: any;
    error: Error;
    opening: boolean;
    connected: boolean;
    closing: boolean;
    closed: boolean;
    cmdBusy: boolean;
    queue: Queue<CommandInstructions>;
    bikeCmdWorker: any;
    cmdStart: number;
    cmdCurrent: any;
    constructor(opts?: any);
    static setSerialPort(spClass: any): void;
    static getClassName(): string;
    getType(): string;
    getPort(): string;
    isConnected(): boolean;
    setUser(user: any, callback: any): void;
    getUserWeight(): number;
    getBikeWeight(): any;
    connect(): void;
    saveConnect(): Promise<unknown>;
    close(): void;
    saveClose(): Promise<unknown>;
    onPortOpen(): void;
    onPortClose(): void;
    onPortError(err: any): void;
    startWorker(): void;
    sendDaum8008CommandfromQueue(): any;
    sendDaum8008Command(logStr: any, payload: any, expected: any, callback?: any, callbackErr?: any, options?: any): void;
    send(cmdInfo: any): void;
    checkCockpit(bikeNo?: number): Promise<unknown>;
    getAddress(): Promise<unknown>;
    getVersion(bikeNo?: number): Promise<unknown>;
    resetDevice(bikeNo?: number): Promise<unknown>;
    startProg(bikeNo?: number): Promise<unknown>;
    stopProg(bikeNo?: number): Promise<unknown>;
    setProg(progNo?: number, bikeNo?: number): Promise<unknown>;
    setBikeType(bikeType: any, bikeNo?: number): Promise<unknown>;
    setPerson(user?: any, bikeNo?: number): Promise<unknown>;
    runData(bikeNo?: number): Promise<unknown>;
    setGear(gear: any, bikeNo?: number): Promise<unknown>;
    setPower(power: any, bikeNo?: number): Promise<unknown>;
    setSlope(slope: any, bikeNo?: number): Promise<unknown>;
}
export {};
