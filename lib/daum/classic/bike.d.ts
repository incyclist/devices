export default class Daum8008 {
    static setSerialPort(spClass: any): void;
    static getClassName(): string;
    constructor(opts?: {});
    logger: EventLogger;
    portName: any;
    settings: any;
    bikeData: {
        userWeight: number;
        bikeWeight: number;
        maxPower: number;
    };
    processor: IndoorBikeProcessor;
    sp: any;
    error: any;
    opening: boolean;
    connected: boolean;
    closing: boolean;
    closed: boolean;
    cmdBusy: boolean;
    queue: Queue<any>;
    getType(): string;
    getPort(): any;
    isConnected(): boolean;
    setUser(user: any, callback: any): void;
    getUserWeight(): any;
    getBikeWeight(): any;
    connect(): void;
    firstOpen: boolean;
    saveConnect(): Promise<any>;
    close(): void;
    bikeCmdWorker: NodeJS.Timeout;
    saveClose(): Promise<any>;
    onPortOpen(): void;
    cmdStart: number;
    onPortClose(): void;
    onPortError(err: any): void;
    startWorker(): void;
    sendDaum8008CommandfromQueue(): any;
    cmdCurrent: any;
    sendDaum8008Command(logStr: any, payload: any, expected: any, callback: any, callbackErr: any, options: any): void;
    send(cmdInfo: any): void;
    checkCockpit(bikeNo?: number): Promise<any>;
    getAddress(): Promise<any>;
    getVersion(bikeNo?: number): Promise<any>;
    resetDevice(bikeNo?: number): Promise<any>;
    startProg(bikeNo?: number): Promise<any>;
    stopProg(bikeNo?: number): Promise<any>;
    setProg(progNo?: number, bikeNo?: number): Promise<any>;
    setBikeType(bikeType: any, bikeNo?: number): Promise<any>;
    setPerson(user?: {}, bikeNo?: number): Promise<any>;
    runData(bikeNo?: number): Promise<any>;
    setGear(gear: any, bikeNo?: number): Promise<any>;
    setPower(power: any, bikeNo?: number): Promise<any>;
    setSlope(slope: any, bikeNo?: number): Promise<any>;
}
import { EventLogger } from "gd-eventlog";
import IndoorBikeProcessor from "../indoorbike.js";
import { Queue } from "../../utils.js";
