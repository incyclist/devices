/// <reference types="node" />
import { ReservedCommands, BikeType } from './utils';
import { Queue } from '../../utils';
import { EventLogger } from 'gd-eventlog';
import { User } from "../../types/user";
import { Route } from "../../types/route";
declare class Daum8i {
    portName: string;
    logger: EventLogger;
    serial: boolean;
    tcpip: boolean;
    tcpipConnection: {
        host: string;
        port: string;
    };
    port: string;
    settings: any;
    sendRetryDelay: number;
    sp: any;
    props: any;
    connected: boolean;
    blocked: boolean;
    state: any;
    bikeData: any;
    processor: any;
    error: Error;
    queue: Queue<any>;
    cmdCurrent: any;
    cmdStart: number;
    constructor(props: any);
    static getClassName(): string;
    getType(): string;
    static setSerialPort(spClass: any): void;
    static setNetImpl(netClass: any): void;
    static getSupportedInterfaces(): string[];
    getPort(): string;
    isConnected(): boolean;
    setUser(user: any, callback: any): void;
    getUserWeight(): any;
    getBikeWeight(): number;
    unblock(): void;
    connect(): void;
    reconnect(): Promise<void>;
    saveConnect(): Promise<unknown>;
    onPortOpen(): void;
    onPortClose(): void;
    getLogState(): {
        sending: any;
        busy: any;
        writeBusy: any;
        opening: any;
        connecting: any;
        waitingForStart: any;
        waitingForEnd: any;
        waitingForAck: any;
        retry: any;
    };
    onPortError(error: any): void;
    errorHandler(): void;
    saveClose(force?: any): Promise<unknown>;
    forceClose(updateState?: boolean): void;
    close(): void;
    sendTimeout(message: any): void;
    checkForResponse(): boolean;
    getTimeoutValue(cmd?: any): number;
    onData(data: any): any;
    sendDaum8iCommand(command: any, queryType: any, payload: any): Promise<unknown>;
    sendACK(): void;
    sendNAK(): void;
    sendReservedDaum8iCommand(command: ReservedCommands, cmdType: any, data?: Buffer): Promise<any[]>;
    getProtocolVersion(): Promise<string>;
    getDashboardVersion(): Promise<unknown>;
    getDeviceType(): Promise<any>;
    getActualBikeType(): Promise<any>;
    setActualBikeType(actualBikeType: any): Promise<any>;
    getTrainingData(): Promise<{
        time: number;
        heartrate: number;
        speed: number;
        slope: number;
        distanceInternal: number;
        cadence: number;
        power: number;
        physEnergy: number;
        realEnergy: number;
        torque: number;
        gear: number;
        deviceState: number;
        speedStatus: string;
    }>;
    setLoadControl(enabled: any): Promise<boolean>;
    getLoadControl(): Promise<boolean>;
    setSlope(slope: any): void;
    setPower(power: any): Promise<number>;
    getPower(power: any): Promise<number>;
    setPerson(person: User): Promise<boolean>;
    programUploadInit(): Promise<boolean>;
    programUploadStart(bikeType: BikeType, route: Route): Promise<Uint8Array>;
    programUploadSendBlock(epp: Uint8Array, offset: number): Promise<boolean>;
    programUploadDone(): Promise<boolean>;
    programUpload(bikeType: BikeType, route: Route): Promise<boolean>;
    startProgram(programId?: number): Promise<boolean>;
    setGear(gear: any): Promise<number>;
    getGear(): Promise<number>;
}
export declare class Daum8iTcp extends Daum8i {
    static getClassName(): string;
    getType(): string;
    static setSerialPort(spClass: any): void;
    getInterface(): string;
    static setNetImpl(netClass: any): void;
    static getSupportedInterfaces(): string[];
}
export declare class Daum8iSerial extends Daum8i {
    static getClassName(): string;
    getType(): string;
    getInterface(): string;
    static setSerialPort(spClass: any): void;
    static setNetImpl(netClass: any): void;
    static getSupportedInterfaces(): string[];
}
export {};
