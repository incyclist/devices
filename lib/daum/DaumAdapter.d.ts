import { EventLogger } from 'gd-eventlog';
import CyclingMode, { IncyclistBikeData } from '../CyclingMode';
import DeviceAdapterBase, { Bike, DeviceAdapter, DeviceData } from '../Device';
import { User } from '../types/user';
interface DaumAdapter {
    getCurrentBikeData(): Promise<any>;
}
export default class DaumAdapterBase extends DeviceAdapterBase implements DeviceAdapter, DaumAdapter, Bike {
    bike: any;
    ignoreHrm: boolean;
    ignoreBike: boolean;
    ignorePower: boolean;
    distanceInternal: number;
    paused: boolean;
    stopped: boolean;
    daumRunData: IncyclistBikeData;
    deviceData: DeviceData;
    currentRequest: any;
    requests: Array<any>;
    iv: any;
    logger: EventLogger;
    cyclingMode: CyclingMode;
    userSettings: User;
    bikeSettings: any;
    tsPrevData: number;
    adapterTime: number;
    requestBusy: boolean;
    updateBusy: boolean;
    constructor(props: any, bike: any);
    setCyclingMode(mode: CyclingMode | string, settings?: any): void;
    getSupportedCyclingModes(): Array<any>;
    getCyclingMode(): CyclingMode;
    getDefaultCyclingMode(): CyclingMode;
    setUserSettings(userSettings: User): void;
    setBikeSettings(bikeSettings: any): void;
    getWeight(): number;
    getCurrentBikeData(): Promise<any>;
    getBike(): any;
    isBike(): boolean;
    isPower(): boolean;
    isHrm(): boolean;
    setIgnoreHrm(ignore: any): void;
    setIgnoreBike(ignore: any): void;
    isStopped(): boolean;
    initData(): void;
    start(props?: any): Promise<any>;
    startUpdatePull(): void;
    connect(): void;
    close(): any;
    logEvent(event: any): void;
    stop(): Promise<boolean>;
    pause(): Promise<boolean>;
    resume(): Promise<boolean>;
    sendUpdate(request: any): Promise<unknown>;
    sendData(): void;
    update(): Promise<void>;
    sendRequests(): Promise<void>;
    bikeSync(): Promise<void>;
    updateData(prev: any, bikeData: any): void;
    transformData(): DeviceData;
    sendRequest(request: any): Promise<any>;
    refreshRequests(): void;
    processClientRequest(request: any): Promise<unknown>;
}
export {};
